"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 1.9.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
from .config import *
# Import after load .env

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'fx#x86eyy3fh%wlnbxrn(_ybq8zq&9st+zsng!ot#x&41ou__9'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
API_VERSION = 1
ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_crontab',
    'rest_framework',
    'oauth2_provider',
    'rangefilter',
    'rest_framework_swagger',
    'drf_yasg',
    'web',
    'mongolog',
]

SWAGGER_SETTINGS = {
   'DEFAULT_AUTO_SCHEMA_CLASS': 'path.to.CamelCaseOperationIDAutoSchema',
}

CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'PATCH',
    'POST',
    'PUT',
    'OPTIONS'
)

CORS_ALLOW_HEADERS = (
    'authorization',
    'accept',
    'accept-encoding',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with'
)

CORS_EXPOSE_HEADERS = (
    'Access-Control-Allow-Origin: *',
)


CORS_ALLOW_CREDENTIALS = True

REST_FRAMEWORK = {
    # 'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
    )
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'web.middleware.AuthenticationMiddleware',

]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'th'

TIME_ZONE = 'Asia/Bangkok'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

OAUTH2_PROVIDER = {
    # this is the list of available scopes
    'SCOPES': {'read': 'Read scope', 'write': 'Write scope', 'groups': 'Access to your groups'},
    'ACCESS_TOKEN_EXPIRE_SECONDS': 60 * 60 * 24 * 365 * 100,
    'OAUTH_DELETE_EXPIRED': True
}

LOGIN_REDIRECT_URL = '/'
LOGIN_URL = '/login'
LOGOUT_REDIRECT_URL = '/login'

# DataFlair #Logging Information
LOGGING = {
    'version': 1,
    # Version of logging
    'disable_existing_loggers': False,
    # disable logging
    'formatters': {
        'verbose': {
            'format': '[{levelname}][{asctime}] {message}',
            'style': '{',
        },
    },
    # Handlers #############################################################
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        # 'mongo-handler': {
        #     'level': 'DEBUG',
        #     'class': 'mongolog.SimpleMongoLogHandler',

        #     'connection': 'mongodb://{}:{}@{}:{}'.format(
        #         os.getenv("MONGODB_USER"),
        #         os.getenv("MONGODB_PASSWORD"),
        #         os.getenv("MONGODB_HOST"),
        #         os.getenv("MONGODB_PORT"),
        #     ),

        #     'collection': 'service-api-log'
        # }
    },
    # Loggers ####################################################################
    'loggers': {
        # mongodb
        'mongolog': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True
        }
    },
}

# cache
CACHES = {
    'default': {
        # 'BACKEND': configs.get('caches', 'backend'),
        # 'LOCATION': configs.get('caches', 'location'),
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.getenv("REDIS_CACHE"),
    },
}

# Crontab
CRONJOBS = [
    ('0 * * * *', 'django.core.management.call_command', ['update_streaming'], {}, '>> /var/log/cron.log'),
    ('* * * * *', 'django.core.management.call_command', ['update_bandwidth'], {}, '>> /var/log/cron.log'),
]

MONGODBHOST = 'mongodb://{}:{}@{}:{}'.format(
                os.getenv("MONGODB_USER"),
                os.getenv("MONGODB_PASSWORD"),
                os.getenv("MONGODB_HOST"),
                os.getenv("MONGODB_PORT")
            )

# IS_LOGGING (MONGO)
IS_LOGGING = os.getenv('IS_LOGGING')

# b2
USE_B2 = os.getenv('B2_ACTIVE').lower() in ('true', '1', 't')
B2_KEY_ID = os.getenv('B2_KEY_ID')
B2_APP_KEY = os.getenv('B2_APP_KEY')
B2_BUCKET_NAME = os.getenv('B2_BUCKET_NAME')

# host image
HOST_IMAGE = os.getenv('image_b2') if os.getenv('B2_ACTIVE').lower() in ('true', '1', 't') else os.getenv('image')

# streaming
HOST_STREAMING = os.getenv('host_streaming')
KEY_STREAMING = os.getenv('key_streaming')

TIMEOUT_LIVE = 120

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
